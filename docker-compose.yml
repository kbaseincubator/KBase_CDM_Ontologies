version: '3.8'

services:
  cdm-ontologies:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    image: kbase-cdm-ontologies:latest
    container_name: cdm-ontologies-pipeline
    # User is now set dynamically in Dockerfile, not needed here
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - PYTHONUNBUFFERED=1
      - HOST_UID=${UID:-1000}
      - HOST_GID=${GID:-1000}
      - WORKFLOW_TIMESTAMP=${WORKFLOW_TIMESTAMP}
    volumes:
      # Mount the entire workspace
      - ./:/home/ontology/workspace
      # Use bind mounts instead of named volumes to avoid permission issues
      - ./outputs:/home/ontology/workspace/outputs
      - ./.cache:/home/ontology/.cache
    working_dir: /home/ontology/workspace
    command: >
      bash -c "
        # Create all necessary directories
        mkdir -p outputs ontology_data_owl/non-base-ontologies ontology_versions logs .cache &&
        # Then run the workflow
        make run-workflow
      "
    # Ultra-high memory limits for 680GB+ peak dataset processing
    deploy:
      resources:
        limits:
          memory: 1536G  # 1.5TB for 680GB+ peak usage with headroom
        reservations:
          memory: 512G
    # Uncomment for interactive debugging
    # stdin_open: true
    # tty: true
    # entrypoint: /bin/bash

  # Optional: Jupyter notebook for interactive analysis
  notebook:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    image: kbase-cdm-ontologies:latest
    container_name: cdm-ontologies-notebook
    # User is now set dynamically in Dockerfile, not needed here
    env_file:
      - ${ENV_FILE:-.env}
    ports:
      - "8888:8888"
    volumes:
      - ./:/home/ontology/workspace
      - ./outputs:/home/ontology/workspace/outputs
      - ./.cache:/home/ontology/.cache
    working_dir: /home/ontology/workspace
    command: >
      bash -c "pip install --user notebook &&
               python -m notebook --ip=0.0.0.0 --no-browser --allow-root"
    deploy:
      resources:
        limits:
          memory: 16G

# No named volumes - using bind mounts instead to avoid permission issues